#!/usr/bin/python
# -*- coding: utf-8 -*-

import smbus
import time
import datetime
import threading
#import raspi_lcd as i2clcd

address = 0x5c # 1011100(7bit,0x5c) + 0(1bit,R/W bit) = 0xb8
READ_INT = 5   # [sec], each reading interval is to be grater than 2 sec
LOG_INT = 10  # [sec]
DEBUG_MODE = True

# 日時付きでメッセージ表示
def printDateMsg(msg):
    d = datetime.datetime.today()
    print  d.strftime('%Y/%m/%d %H:%M:%S') + ' [TRMO] ' + msg

# am2320 のクラス
class Thermo(threading.Thread):

    def __init__(self):
        super(Thermo, self).__init__()
        self.__i2c = smbus.SMBus(1)
        self.__hum = 0.0
        self.__tmp = 0.0
        self.__stop_flag = False
        self.__is_available = False
        self.t = threading.Thread(target=self.logTimer)
        self.t.setDaemon(True)
        self.t.start()

    def __updateValue(self):
        #self.com_i2c = True    # 通信開始
        if self.__is_available:
            try:    # センサsleep解除
                self.__i2c.write_i2c_block_data(address, 0x00, [])
            except:
                pass    # ACK が帰ってくるとは限らないが続行
            time.sleep(0.001)

            try:    # 読み取り命令
                self.__i2c.write_i2c_block_data(address,0x03,[0x00,0x04])
            except:
                if DEBUG_MODE: printDateMsg("[Error] am2320(1) ")
                #self.com_i2c = False	# 通信終了
                self.__hum = 0.0		# 読み取り失敗時は0.0
                self.__tmp = 0.0
                self.__is_available = False
                return
            time.sleep(0.015)

            try:    # データ受取
                block = self.__i2c.read_i2c_block_data(address,0,6)
            except:
                if DEBUG_MODE: printDateMsg("[Error] am2320(2) ")
                #self.com_i2c = False   # 通信終了
                self.__hum = 0.0        # 読み取り失敗時は0.0
                self.__tmp = 0.0
                self.__is_available = False
                return
            time.sleep(0.001)

            self.__hum = (block[2] << 8 | block[3])/10.0
            self.__tmp = (block[4] << 8 | block[5])/10.0
            self.__is_available = False

    def getHum(self):
        self.__updateValue()
        return self.__hum

    def getTmp(self):
        self.__updateValue()
        return self.__tmp

    def stringValue(self):
        return  "湿度: " + str(self.getHum()) + "％, " \
            + "温度: " + str(self.getTmp()) + "℃"

    def displayValue(self):
        print self.stringValue()

    def logTimer(self):
        while True:
            self.__logFlag = True
            time.sleep(LOG_INT)

    def run(self):
        while not self.__stop_flag:
            self.__is_available = True
            if self.__logFlag:
                printDateMsg(self.stringValue())
                self.__logFlag = False
            time.sleep(READ_INT)

    def stop(self):
        self.__stop_flag = True
        #self.t.stop()


def main_loop():
    while True:
        thermo.displayValue()
        time.sleep(1)


if __name__ == '__main__':
    thermo = Thermo()
    thermo.start()
    #lcd = i2clcd.LCDController()
    #lcd.initialize_display()

    try:
        main_loop()
    except KeyboardInterrupt:
        print "Keyboard Interrupt"
    finally:
        thermo.stop()
# ============= EOF ======================
